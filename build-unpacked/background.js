var background=(function(){"use strict";function f(e){return e==null||typeof e=="function"?{main:e}:e}const r=globalThis.browser?.runtime?.id?globalThis.browser:globalThis.chrome,m=f(()=>{console.log("🚀 Background script starting!",{id:r.runtime.id}),console.log("🔧 Calling initializeContextMenus..."),h().catch(e=>{console.error("❌ Error during initialization:",e)}),r.storage.onChanged.addListener((e,o)=>{console.log("📦 Storage changed:",o,e),o==="local"&&e.workflows&&(console.log("🔄 Workflows changed, updating context menus..."),u().catch(s=>{console.error("❌ Error updating context menus:",s)}))}),r.contextMenus.onClicked.addListener(async(e,o)=>{if(console.log("🖱️ Context menu clicked:",e.menuItemId),!o?.id)return;const s=e.menuItemId.toString().replace("workflow_",""),n=e.selectionText||"",{getAllWorkflows:i}=await Promise.resolve().then(()=>g),a=(await i()).find(t=>t.id===s);if(!a){console.error("Workflow not found:",s);return}try{const t=await r.tabs.sendMessage(o.id,{type:"EXECUTE_WORKFLOW",workflow:a,selectedText:n});t&&!t.success&&console.error("Workflow execution failed:",t.error)}catch(t){console.error("Failed to send message to content script:",t)}}),console.log("✅ Background script initialized")});async function h(){console.log("🔨 initializeContextMenus called");try{await r.contextMenus.removeAll(),console.log("🗑️ Removed all existing menus"),await u(),console.log("✅ Context menus initialized")}catch(e){console.error("❌ Error in initializeContextMenus:",e)}}async function u(){try{await r.contextMenus.removeAll();const{getAllWorkflows:e}=await Promise.resolve().then(()=>g),o=await e();console.log("[Context Menu] Total workflows:",o.length);const s=o.filter(n=>{const i=n.nodes.find(w=>!n.edges.some(t=>t.target===w.id));return console.log("[Context Menu] Workflow:",n.name,"First node type:",i?.type),i?.type==="getSelection"});if(console.log("[Context Menu] Selection workflows found:",s.length),s.length===0){console.log("[Context Menu] No workflows starting with GetSelectionNode, menu not created");return}r.contextMenus.create({id:"workflows-parent",title:"Flosheet",contexts:["selection"]}),console.log("[Context Menu] Created parent menu"),s.forEach(n=>{r.contextMenus.create({id:`workflow_${n.id}`,parentId:"workflows-parent",title:n.name,contexts:["selection"]}),console.log("[Context Menu] Added workflow:",n.name)})}catch(e){console.error("Failed to update context menus:",e)}}function C(){}function l(e,...o){}const k={debug:(...e)=>l(console.debug,...e),log:(...e)=>l(console.log,...e),warn:(...e)=>l(console.warn,...e),error:(...e)=>l(console.error,...e)};let c;try{c=m.main(),c instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(e){throw k.error("The background crashed on startup!"),e}const x=c,d="workflows";async function p(){return(await chrome.storage.local.get(d))[d]||[]}const g=Object.freeze(Object.defineProperty({__proto__:null,getAllWorkflows:p},Symbol.toStringTag,{value:"Module"}));return x})();
